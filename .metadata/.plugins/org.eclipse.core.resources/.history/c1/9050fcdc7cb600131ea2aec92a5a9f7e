package minesweeper;

import java.util.Random;
import java.util.Scanner;

public class Grid {
	Boolean isGameOver=false;
	Scanner teclado; 
	
	int colGame=10;
	int rowGame=10;
	
	String[][] matrixVisual;
    int [][] matrixBinary;
    int [][] matrixStateFlag;
  
	public void Begin (){
		
		int i;
		int j;
		int valueRow;
		int valueCol;

		int k=15;
		int row=rowGame;
		int col=colGame;
		
		
		matrixVisual = new String[row][col];
		matrixBinary = new int[row][col];
		matrixStateFlag = new int[row][col];
		Random randRow = new Random();
		Random randCol = new Random();
		
		for (i=0;i<row;i=i+1){
			for (j=0;j<col;j=j+1){
					matrixBinary[i][j]=0;
					matrixStateFlag[i][j]=0;
					matrixVisual[i][j]="-";
				}
			}	
		
		for (i=0;i<k;i=i+1){
			valueRow = randRow.nextInt(row);
			valueCol = randCol.nextInt(col);	
			if (matrixBinary[valueRow][valueCol]==1){
				while (matrixBinary[valueRow][valueCol]==1){
					valueRow = randRow.nextInt(row);
					valueCol = randCol.nextInt(col);
				}
			} 
			matrixBinary[valueRow][valueCol]=1;
		}	
		
	}//end public void Begin
	
	public void uncover(int row, int col){	
		int meterMine=0;
		
		if ((matrixStateFlag[row][col]==2)||(matrixBinary[row][col]==1)){
			while ((matrixStateFlag[row][col]==2)||(matrixBinary[row][col]==1)){
				teclado=new Scanner(System.in);
	            System.out.print("Enter a righ option:");
	            System.out.print("Enter row: ");
			    row=teclado.nextInt();
			    System.out.print("Enter Column: ");
			    col=teclado.nextInt();
			}
		}
		
		if (row<0||col<0){
			while (row<0||col<0){
				teclado=new Scanner(System.in);
	            System.out.print("Enter a righ option:");
	            System.out.print("Enter row: ");
			    row=teclado.nextInt();
			    System.out.print("Enter Column: ");
			    col=teclado.nextInt();
			}
		}
		
		if (row>rowGame||col>colGame){
			while (row>rowGame||col>colGame){
				teclado=new Scanner(System.in);
	            System.out.print("Enter a righ option:");
	            System.out.print("Enter row: ");
			    row=teclado.nextInt();
			    System.out.print("Enter Column: ");
			    col=teclado.nextInt();
			}
		}
		
		if (matrixStateFlag[row][col]==0){
			
			matrixStateFlag[row][col]=1;
			if (matrixBinary[row][col]==1){
				isGameOver=true;
			}
			else {
				
				if ((row-1)>=0){
					if (matrixBinary[row-1][col]==1){
						meterMine=meterMine+1;
					}
					if ((col-1)>=0){
						if (matrixBinary[row-1][col-1]==1){
							meterMine=meterMine+1;
						}	
					}
					if ((col+1)<=10){
						if (matrixBinary[row-1][col+1]==1){
							meterMine=meterMine+1;
						}
					}	
				}//end row-1
				
				if ((col-1)>=0){
					if (matrixBinary[row][col-1]==1){
					meterMine=meterMine+1;
					}
					if ((row+1)<=10){
						if (matrixBinary[row+1][col-1]==1){
							meterMine=meterMine+1;
						}
					}
				}//end col-1
				
				if ((row+1)<=10){
					if (matrixBinary[row+1][col]==1){
						meterMine=meterMine+1;
					}
					if (matrixBinary[row+1][col+1]==1){
						meterMine=meterMine+1;
					}
				}//end row+1
				
				if ((col+1)<=10){
					if (matrixBinary[row][col+1]==1){
						meterMine=meterMine+1;
					}
				}
				
				switch(meterMine) {
				 case 1: 
					 matrixVisual[row][col]="1";
				     break;
				 case 2: 
					 matrixVisual[row][col]="2";
				     break;
				 case 3: 
					 matrixVisual[row][col]="3";
				     break;
				 case 4: 
					 matrixVisual[row][col]="4";
				     break;
				 case 5:
					 matrixVisual[row][col]="5";
					 break;
				 case 6: 
					 matrixVisual[row][col]="6";
				     break;
				 case 7: 
					 matrixVisual[row][col]="7";
				     break;
				 case 8: 
					 matrixVisual[row][col]="8";
				     break;
				 case 0:  
					 matrixVisual[row][col]="0";
				     break;
				 }
			}
		}
		
		
	}//end public void uncover
	
	public Boolean stateGame(){
		return isGameOver;
	}
	
	public void flagAsMine(int row,int col){
		
		while ((matrixStateFlag[row][col]==2)||(matrixStateFlag[row][col]==1)){
			teclado=new Scanner(System.in);
            System.out.print("Enter a righ option for flag:");
            System.out.print("Enter row: ");
		    row=teclado.nextInt();
		    System.out.print("Enter Column: ");
		    col=teclado.nextInt();
		}
		
		if (row<0||col<0){
			while (row<0||col<0){
				teclado=new Scanner(System.in);
	            System.out.print("Enter a righ option:");
	            System.out.print("Enter row: ");
			    row=teclado.nextInt();
			    System.out.print("Enter Column: ");
			    col=teclado.nextInt();
			}
		}
		
		if (row>rowGame||col>colGame){
			while (row>rowGame||col>colGame){
				teclado=new Scanner(System.in);
	            System.out.print("Enter a righ option:");
	            System.out.print("Enter row: ");
			    row=teclado.nextInt();
			    System.out.print("Enter Column: ");
			    col=teclado.nextInt();
			}
		}
		
		matrixStateFlag[row][col]=2;
		matrixVisual[row][col]="F";
	}
	
	public void clearFlag (int row,int col){
		
		while ((matrixStateFlag[row][col]==0)||(matrixStateFlag[row][col]==1)){
			teclado=new Scanner(System.in);
            System.out.print("Enter a righ option for Clear flag:");
            System.out.print("Enter row: ");
		    row=teclado.nextInt();
		    System.out.print("Enter Column: ");
		    col=teclado.nextInt();
		}
		
		if (row<0||col<0){
			while (row<0||col<0){
				teclado=new Scanner(System.in);
	            System.out.print("Enter a righ option:");
	            System.out.print("Enter row: ");
			    row=teclado.nextInt();
			    System.out.print("Enter Column: ");
			    col=teclado.nextInt();
			}
		}
		
		if (row>rowGame||col>colGame){
			while (row>rowGame||col>colGame){
				teclado=new Scanner(System.in);
	            System.out.print("Enter a righ option:");
	            System.out.print("Enter row: ");
			    row=teclado.nextInt();
			    System.out.print("Enter Column: ");
			    col=teclado.nextInt();
			}
		}
		
		matrixStateFlag[row][col]=0;
	}//end public void clearFlag
	
	public void display(){
		int i;
		int j;
		
		for (i=1;i==rowGame;i=i+1){
			System.out.println("");
			for (j=1;j==colGame;j=j+1){
				System.out.print(matrixVisual[i][j]+" ");
			}
		}
	}//end public void display
	
	public void displayInternal(){
		int i;
		int j;
		
		for (i=1;i==rowGame;i=i+1){
			System.out.println("");
			for (j=1;j==colGame;j=j+1){
				if (matrixStateFlag[i][j]==1){
					System.out.print(matrixStateFlag[i][j]+" ");
				}
			}
		}
	}//end public void display
}//end public class Grid
